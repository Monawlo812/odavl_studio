[{"filePath":"C:\\Users\\sabou\\odavl_studio\\packages\\org-orchestrator\\__tests__\\scheduler.spec.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":3,"column":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { scheduleWorkflows, RepoConfig } from '../scheduler.js';\ntest('schedules up to maxConcurrency', async () => {\n  const repos: RepoConfig[] = [\n    { name: 'repo1', prPerDay: 2, ciMinutesPerHour: 10 },\n    { name: 'repo2', prPerDay: 1, ciMinutesPerHour: 5 }\n  ];\n  const running = await scheduleWorkflows(repos, 1);\n  expect(running).toBeLessThanOrEqual(1);\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sabou\\odavl_studio\\packages\\org-orchestrator\\scheduler.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":2,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Org-wide workflow scheduler for ODAVL\nexport interface RepoConfig {\n  name: string;\n  prPerDay: number;\n  ciMinutesPerHour: number;\n}\n\nexport async function scheduleWorkflows(repos: RepoConfig[], maxConcurrency = 2) {\n  let running = 0;\n  for (const _ of repos) {\n    if (running >= maxConcurrency) break;\n    // Simulate scheduling scanHealPrWorkflow\n    running++;\n    setTimeout(() => {\n      running--;\n      // In real use, would trigger Temporal workflow here\n    }, 100);\n  }\n  return running;\n}\n","usedDeprecatedRules":[]}]
